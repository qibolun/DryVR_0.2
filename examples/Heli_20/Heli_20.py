from scipy.integrate import odeint
import numpy as np
import matplotlib.pyplot as plt

def Heli_20_dynamic(y,t,u1,u2,u3,u4,u5,u6):
    x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20 = y

    x1_dot = 0.0011251*u1 - 0.0085436*u2 - 0.59611*u3 - 0.12084*u4 - 0.96485*u5 - 0.069153*u6 - 0.53545*x1 + 0.94583*x2 - 0.058994*x3 + 0.98618*x4 - 0.24022*x5 - 0.49492*x6 - 0.66994*x7 + 1.1462*x8 - 0.45435*x9 - 0.22624*x10 - 0.095246*x11 + 0.356*x12 - 0.25943*x13 + 0.10278*x14 + 0.045727*x15 + 0.03138*x16 + 0.023459*x17 - 0.02474*x18 + 0.012512*x19 - 0.00027667*x20
    x2_dot = 0.0014259*u1 + 0.017433*u2 - 1.1539*u3 - 0.031416*u4 - 1.2127*u5 - 0.0028677*u6 - 2.2325*x1 - 1.541*x2 + 1.2639*x3 + 3.1576*x4 - 0.62434*x5 - 1.231*x6 - 1.8482*x7 + 3.265*x8 - 1.3885*x9 - 0.23271*x10 - 0.29004*x11 + 1.1193*x12 - 0.50237*x13 + 0.38615*x14 - 0.021805*x15 + 0.028649*x16 + 0.0035535*x17 - 0.066105*x18 + 0.023229*x19 - 0.030745*x20
    x3_dot = 0.015225*u2 - 0.0011684*u1 + 0.16888*u3 + 0.08523*u4 + 0.85815*u5 + 0.12226*u6 + 0.80376*x1 + 0.59626*x2 - 0.71496*x3 - 2.4187*x4 + 0.51327*x5 + 1.0854*x6 + 1.6211*x7 - 2.8549*x8 + 1.2021*x9 + 0.17023*x10 + 0.2486*x11 - 0.95975*x12 + 0.41046*x13 - 0.33395*x14 + 0.029003*x15 - 0.020086*x16 + 0.0013696*x17 + 0.055742*x18 - 0.018831*x19 + 0.028136*x20
    x4_dot = 0.0061396*u1 + 0.18817*u2 - 1.1878*u3 + 0.11661*u4 + 0.75923*u5 + 0.76414*u6 - 0.081122*x1 - 1.1674*x2 - 0.15688*x3 - 6.731*x4 + 3.5372*x5 + 7.3014*x6 + 9.5605*x7 - 16.529*x8 + 6.6113*x9 + 1.3839*x10 + 1.3501*x11 - 5.1495*x12 + 2.5029*x13 - 1.7263*x14 - 0.014812*x15 - 0.1804*x16 - 0.064956*x17 + 0.31189*x18 - 0.11788*x19 + 0.1205*x20
    x5_dot = 0.044273*u2 - 0.0034345*u1 + 0.076467*u3 + 0.25203*u4 - 0.098982*u5 - 0.20997*u6 - 0.0016376*x1 + 0.062543*x2 + 0.014549*x3 - 0.90757*x4 - 0.47589*x5 - 1.7451*x6 - 3.2706*x7 + 5.6898*x8 - 2.1076*x9 - 0.48839*x10 - 0.42659*x11 + 1.6358*x12 - 0.83683*x13 + 0.54299*x14 + 0.024002*x15 + 0.065662*x16 + 0.028821*x17 - 0.10111*x18 + 0.039578*x19 - 0.03512*x20
    x6_dot = 0.13454*u2 - 0.0018586*u1 + 0.044762*u3 + 0.47216*u4 + 0.22532*u5 - 0.41213*u6 + 0.26596*x1 + 0.50771*x2 - 0.55128*x3 - 3.2279*x4 - 0.11075*x5 - 2.2723*x6 - 7.449*x7 + 13.13*x8 - 4.8925*x9 - 1.2148*x10 - 1.0142*x11 + 3.9271*x12 - 2.0443*x13 + 1.3299*x14 + 0.068977*x15 + 0.16628*x16 + 0.075293*x17 - 0.25043*x18 + 0.098777*x19 - 0.085048*x20
    x7_dot = 0.0098463*u1 + 0.1701*u2 + 0.139*u3 + 0.054741*u4 + 0.86487*u5 + 0.4739*u6 + 0.80537*x1 + 1.4018*x2 - 1.6136*x3 - 6.3309*x4 + 2.0487*x5 + 2.0632*x6 - 14.391*x7 + 29.008*x8 - 17.749*x9 - 4.6379*x10 - 4.3821*x11 + 17.147*x12 - 8.5507*x13 + 5.8449*x14 + 0.14228*x15 + 0.65174*x16 + 0.26183*x17 - 1.0652*x18 + 0.41066*x19 - 0.39336*x20
    x8_dot = 0.10161*u4 - 0.14069*u2 - 0.21795*u3 - 0.0088862*u1 - 1.5302*u5 - 0.8757*u6 - 1.3868*x1 - 2.4231*x2 + 2.7929*x3 + 10.752*x4 - 3.8935*x5 - 4.2865*x6 + 25.278*x7 - 52.044*x8 + 36.068*x9 + 9.482*x10 + 9.0593*x11 - 35.304*x12 + 17.401*x13 - 12.061*x14 - 0.20046*x15 - 1.3034*x16 - 0.50229*x17 + 2.1807*x18 - 0.83506*x19 + 0.82315*x20
    x9_dot = 0.17497*u4 - 0.26946*u2 - 0.036*u3 - 0.03031*u1 + 0.68321*u5 + 0.088369*u6 + 0.54915*x1 + 0.89984*x2 - 1.126*x3 - 3.5884*x4 + 0.67282*x5 - 0.86612*x6 - 9.0766*x7 + 16.786*x8 - 19.185*x9 - 5.6055*x10 - 7.3729*x11 + 28.567*x12 - 14.154*x13 + 10.205*x14 - 0.023254*x15 + 1.055*x16 + 0.36309*x17 - 1.8675*x18 + 0.70775*x19 - 0.74018*x20
    x10_dot = 0.097076*u3 - 0.13087*u2 - 0.0039601*u1 + 0.14869*u4 + 0.080414*u5 + 0.05233*u6 + 0.13014*x1 + 0.24129*x2 - 0.18988*x3 + 0.024205*x4 - 0.10808*x5 - 0.37933*x6 - 1.0448*x7 + 1.3375*x8 - 3.2525*x9 - 2.375*x10 - 3.3668*x11 + 10.797*x12 - 6.5914*x13 + 2.4003*x14 + 0.8923*x15 + 0.65439*x16 + 0.47423*x17 - 0.55173*x18 + 0.27244*x19 - 0.030942*x20
    x11_dot = 0.0069042*u1 + 0.01068*u2 - 0.037867*u3 + 0.0066115*u4 + 0.12504*u5 - 0.091964*u6 + 0.07652*x1 + 0.12077*x2 - 0.1675*x3 - 0.42405*x4 - 0.022568*x5 - 0.60135*x6 - 0.81041*x7 + 1.1701*x8 - 1.4354*x9 + 1.9702*x10 - 1.7236*x11 + 8.0607*x12 - 4.5989*x13 + 3.8434*x14 + 0.0068866*x15 + 0.45556*x16 + 0.15354*x17 - 0.79363*x18 + 0.30284*x19 - 0.31435*x20
    x12_dot = 0.021447*u2 - 0.0090314*u1 + 0.087933*u3 + 0.051172*u4 - 0.44626*u5 + 0.41262*u6 - 0.2833*x1 - 0.4883*x2 + 0.57903*x3 + 0.76832*x4 + 0.090064*x5 + 2.1128*x6 + 1.8791*x7 - 2.8913*x8 + 6.1682*x9 - 5.3498*x10 + 6.3256*x11 - 31.057*x12 + 17.428*x13 - 17.39*x14 + 0.1623*x15 - 2.1041*x16 - 0.65741*x17 + 3.7141*x18 - 1.4077*x19 + 1.4976*x20
    x13_dot = 0.014341*u1 + 0.0035331*u2 + 0.079243*u3 - 0.049964*u4 + 0.21637*u5 - 0.21689*u6 + 0.19379*x1 + 0.38929*x2 - 0.30945*x3 + 0.45217*x4 - 0.10239*x5 - 1.0607*x6 - 1.4107*x7 + 2.4913*x8 - 2.9236*x9 + 2.2566*x10 - 2.7569*x11 + 15.299*x12 - 10.182*x13 + 8.9926*x14 + 1.3877*x15 + 1.8822*x16 + 0.99517*x17 - 2.2839*x18 + 0.96688*x19 - 0.61578*x20
    x14_dot = 0.021904*u1 - 0.015776*u2 - 0.016353*u3 - 0.028234*u4 - 0.10992*u5 + 0.17406*u6 - 0.088156*x1 - 0.16809*x2 + 0.14343*x3 - 0.30966*x4 + 0.2584*x5 + 1.0854*x6 + 0.28471*x7 - 0.015446*x8 + 2.9922*x9 - 0.0039626*x10 + 3.1607*x11 - 14.939*x12 + 9.449*x13 - 14.78*x14 + 1.4357*x15 - 2.5769*x16 - 0.2766*x17 + 5.0338*x18 - 1.8691*x19 + 2.2486*x20
    x15_dot = 0.035143*u1 + 0.046515*u2 + 0.0072163*u3 + 0.011674*u4 - 0.016402*u5 - 0.0027048*u6 - 0.0081737*x1 - 0.013253*x2 + 0.020903*x3 + 0.065603*x4 - 0.058044*x5 - 0.092943*x6 + 0.1544*x7 - 0.6573*x8 + 1.5397*x9 + 0.39267*x10 + 0.16815*x11 - 1.3394*x12 + 0.31302*x13 - 1.1176*x14 - 3.7002*x15 - 4.8211*x16 - 3.5645*x17 + 0.4007*x18 - 0.71329*x19 - 1.3434*x20
    x16_dot = 0.021514*u1 - 0.0047135*u2 + 0.010102*u3 - 0.021246*u4 - 0.0056611*u5 - 0.0071184*u6 - 0.0021126*x1 + 0.0045559*x2 + 0.010782*x3 + 0.12862*x4 + 0.021174*x5 + 0.083651*x6 + 0.23559*x7 - 0.34413*x8 + 0.50117*x9 + 0.18354*x10 + 0.041831*x11 + 0.27287*x12 - 0.62521*x13 + 0.3842*x14 + 2.4525*x15 - 1.5408*x16 - 2.7037*x17 + 2.3162*x18 - 1.1873*x19 + 0.06449*x20
    x17_dot = 0.0069815*u2 - 0.0066634*u1 - 0.0034249*u3 - 0.019562*u4 - 0.0064526*u5 + 0.014588*u6 - 0.00784*x1 - 0.013701*x2 + 0.010688*x3 - 0.047763*x4 + 0.05533*x5 + 0.15576*x6 - 0.026752*x7 + 0.16823*x8 + 0.53167*x9 + 0.31217*x10 + 0.28047*x11 - 1.2569*x12 + 0.74383*x13 - 2.3784*x14 + 1.3373*x15 + 0.87721*x16 - 2.1967*x17 + 2.1136*x18 - 1.6072*x19 - 1.0693*x20
    x18_dot = 0.0056511*u1 + 0.0011261*u2 - 0.0078662*u3 + 0.012984*u4 + 0.033038*u5 + 0.0076861*u6 + 0.024026*x1 + 0.034523*x2 - 0.052826*x3 - 0.21635*x4 + 0.016714*x5 - 0.099534*x6 - 0.89693*x7 + 1.7677*x8 - 1.6558*x9 - 0.32557*x10 - 0.49979*x11 + 1.8009*x12 - 0.77725*x13 + 1.0793*x14 + 0.29154*x15 + 0.29352*x16 + 0.098531*x17 - 4.3794*x18 + 3.0079*x19 - 2.8438*x20
    x19_dot = 0.00029499*u1 - 0.0027418*u2 - 0.0019926*u3 - 0.0047579*u4 - 0.0083815*u5 - 0.011279*u6 - 0.0087376*x1 - 0.013851*x2 + 0.016991*x3 + 0.070327*x4 - 0.013113*x5 - 0.00056883*x6 + 0.38178*x7 - 0.75171*x8 + 0.4453*x9 + 0.14762*x10 - 0.0021114*x11 + 0.23502*x12 - 0.14615*x13 + 0.5925*x14 + 0.080479*x15 - 0.52174*x16 + 0.49309*x17 + 1.9479*x18 - 3.6071*x19 + 1.7279*x20
    x20_dot = 0.0019405*u1 + 0.0063329*u2 + 0.0061006*u3 - 0.0073179*u4 + 0.014248*u5 + 0.0031549*u6 + 0.013754*x1 + 0.02637*x2 - 0.023816*x3 - 0.032552*x4 + 0.024153*x5 + 0.0041736*x6 - 0.43152*x7 + 0.89924*x8 - 0.44513*x9 + 0.0018282*x10 - 0.17213*x11 + 0.77372*x12 - 0.64978*x13 + 0.60807*x14 - 0.084159*x15 - 0.35061*x16 - 0.47139*x17 - 1.8305*x18 + 3.2342*x19 - 6.6335*x20

    dydt = [x1_dot, x2_dot, x3_dot, x4_dot, x5_dot, x6_dot, x7_dot, x8_dot, x9_dot, x10_dot, x11_dot, x12_dot, x13_dot, x14_dot, x15_dot, x16_dot, x17_dot, x18_dot, x19_dot, x20_dot]
    return dydt

def TC_Simulate(Mode,initialCondition,time_bound):
    time_step = 0.005;
    time_bound = float(time_bound)

    number_points = int(np.ceil(time_bound/time_step))
    t = [i*time_step for i in range(0,number_points)]
    if t[-1] != time_step:
        t.append(time_bound)
    newt = []
    for step in t:
        newt.append(float(format(step, '.3f')))
    t = newt

    u1 = 0.0
    u2 = 0.0
    u3 = -1.0
    u4 = 1.0
    u5 = 0.0
    u6 = 0.0

    sol = odeint(Heli_20_dynamic, initialCondition, t, args=(u1,u2,u3,u4,u5,u6),hmax=time_step)

    trace = []
    for j in range(len(t)):
        #print t[j], current_psi
        tmp = []
        tmp.append(t[j])
        tmp.append(float(sol[j,0]))
        tmp.append(float(sol[j,1]))
        tmp.append(float(sol[j,2]))
        tmp.append(float(sol[j,3]))
        tmp.append(float(sol[j,4]))
        tmp.append(float(sol[j,5]))
        tmp.append(float(sol[j,6]))
        tmp.append(float(sol[j,7]))
        tmp.append(float(sol[j,8]))
        tmp.append(float(sol[j,9]))
        tmp.append(float(sol[j,10]))
        tmp.append(float(sol[j,11]))
        tmp.append(float(sol[j,12]))
        tmp.append(float(sol[j,13]))
        tmp.append(float(sol[j,14]))
        tmp.append(float(sol[j,15]))
        tmp.append(float(sol[j,16]))
        tmp.append(float(sol[j,17]))
        tmp.append(float(sol[j,18]))
        tmp.append(float(sol[j,19]))
        trace.append(tmp)
    return trace

if __name__ == "__main__":
    sol = TC_Simulate("Default", [-0.002, 0.0, -0.001, -0.001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0007, 0.0, 0.0, 0.0, 0.0002, -0.001, 0.001, -0.001], 20.0)

    time = [row[0] for row in sol]

    a = [row[1] for row in sol]

    b = [row[2] for row in sol]

    plt.plot(time, a, "-r")
    plt.plot(time, b, "-g")
    plt.show()
    plt.plot(a, b, "-r")
    plt.show()

